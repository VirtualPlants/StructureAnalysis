"""Sequences"""
__revision__ = "$Id: vectors.py 6217 2009-04-08 12:40:15Z cokelaer $"

import os
import openalea.stat_tool.interface as interface
import _sequence_analysis


from _sequence_analysis import _Sequences
#_Sequences = csequence._Sequences

__all__ = ['Sequences',
           '_Sequences']


# Extend dynamically class
interface.extend_class( _Sequences, interface.StatInterface)

# Add methods to _Vectors


def Sequences(*args):
    """Construction of a set of sequences from multidimensional arrays of integers, from data generated by a renewal process or from an ASCII file.

    The data structure of type array(array(array(int))) should be constituted at the most internal level of arrays of constant size. If the optional argument IndexParameter is set at "Position" or "Time", the data structure of type array(array(array(int))) is constituted at the most internal level of arrays of size 1+n (index parameter, n variables attached to the explicit index parameter). If the optional argument IndexParameter is set at "Position", only the index parameter of the last array of size 1+n is considered and the first component of successive elementary arrays (representing the index parameter) should be increasing. If the optional argument IndexParameter is set at "Time", the first component of successive elementary arrays should be strictly increasing.
  
    :Parameters:
        array1 (array(array(int))): input data for univariate sequences
        arrayn (array(array(array(int)))): input data for multivariate sequences,
        timev (renewal_data),
        file_name (string).
    
    :Optional Parameters:
    Identifiers (array(int)): explicit identifiers of sequences. This optional argument can only be used if the first argument is of type array(array(int/array(int))).
    IndexParameter (string): type of the explicit index parameter: "Position" or "Time" (the default: implicit discrete index parameter starting at 0). This optional argument can only be used if the first argument is of type array(array(int/array(int))).
    
    :Returns:
        If the construction succeeds, an object of type sequences or discrete_sequences is returned, otherwise no object is returned. The returned object is of type discrete_sequences if all the variables are of type STATE, if the possible values for each variable are consecutive from 0 and if the number of possible values for each variable is <= 15.

    :Examples:
        >>> Sequences(array1, Identifiers->[1, 8, 12])
        >>> Sequences(arrayn, Identifiers->[1, 8, 12],
        >>> IndexParameter->"Position")
        >>> Sequences(timev)
        >>> Sequences(file_name)    
    
    .. seealso::    
        :class:`~openalea.stat_tool.output.Save`,
        `ExtractHistogram`, 
        `ExtractVectors`, 
        `AddAbsorbingRun`,
        `Cluster`, 
        `Cumulate`, 
        `Difference`, 
        `Indexextract`, 
        `Lengthselect`, 
        `Merge`, 
        `MergeVariable`, 
        `MovingAverage`, 
        `RecurrenceTimeSequences`, 
        `RemoveRun`, 
        `Reverse`, 
        `SegmentationExtract`, 
        `SelectIndividual`, 
        `SelectVariable`, 
        `Shift`, 
        `Transcode`, 
        `ValueSelect`,
        `VariableScaling`, 
        `ComputeCorrelation`, 
        `ComputePartialAutoCorrelation`, 
        `ComputeSelfTransition`, 
        `Compare` (sequences), 
        `Compare` (Markovian models of seuqences), 
        `Compare` (Markovian models), 
        `Estimate` (Markovian models), 
        `ComputeStateSequences`, 
        `Simulate` (Markovian models).
    """
    if (len(args)==0):
        raise TypeError("Expected a list or filename argument")
    elif len(args)==1 and isinstance(args[0], str):
        filename = args[0]
        if os.path.isfile(filename):
            return _Sequences(*args)
        else:
            raise IOError("bad file name")
    elif len(args)==1 and isinstance(args[0], list):
        return _Sequences(*args)
    else:
        raise TypeError("Expected a valid filename or a list of lists (e.g., [[1,0],[0,1]])")
    
    




